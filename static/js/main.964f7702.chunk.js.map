{"version":3,"sources":["components/icons/ButtonLoader.js","components/PaintLoader.js","App.js","serviceWorker.js","index.js"],"names":["ButtonLoader","className","width","viewBox","fill","cx","cy","r","d","stroke","PaintLoader","Form","React","lazy","Results","App","useState","data","setData","fallback","onData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0RAIe,SAASA,IACtB,OACE,yBAAKC,UAAU,YAAYC,MAAM,OAAOC,QAAQ,cAAcC,KAAK,QACjE,4BAAQC,GAAG,QAAQC,GAAG,QAAQC,EAAE,QAAQH,KAAK,YAC7C,0BAAMI,EAAE,0QAA0QJ,KAAK,UAAUK,OAAO,YACxS,0BAAMD,EAAE,0QAA0QJ,KAAK,UAAUK,OAAO,YACxS,0BAAMD,EAAE,+QAA+QJ,KAAK,UAAUK,OAAO,YAC7S,0BAAMD,EAAE,kRAAkRJ,KAAK,UAAUK,OAAO,YAChT,0BAAMD,EAAE,iRAAiRJ,KAAK,UAAUK,OAAO,YAC/S,0BAAMD,EAAE,gRAAgRJ,KAAK,UAAUK,OAAO,YAC9S,0BAAMD,EAAE,+QAA+QJ,KAAK,UAAUK,OAAO,YAC7S,0BAAMD,EAAE,yQAAyQJ,KAAK,UAAUK,OAAO,YACvS,0BAAMD,EAAE,yQAAyQJ,KAAK,UAAUK,OAAO,aCb9R,SAASC,IACtB,OACE,yBAAKT,UAAU,eACb,kBAAC,EAAD,O,UCDAU,EAAOC,IAAMC,MAAK,kBAAM,gCACxBC,EAAUF,IAAMC,MAAK,kBAAM,gCA8BlBE,MA5Bf,WAAgB,IAAD,EACWC,mBAAS,MADpB,mBACNC,EADM,KACAC,EADA,KAGb,OACE,yBAAKjB,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,WAAD,CAAUkB,SAAU,kBAACT,EAAD,OAClB,kBAACC,EAAD,CAAMS,OAAQF,IACd,kBAACJ,EAAYG,GACb,8BACE,kGAGA,mJCTQI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.964f7702.chunk.js","sourcesContent":["import React from 'react';\n\nimport './ButtonLoader.css';\n\nexport default function ButtonLoader() {\n  return (\n    <svg className=\"BtnLoader\" width=\"100%\" viewBox=\"0 0 339 337\" fill=\"none\">\n      <circle cx=\"176.5\" cy=\"181.5\" r=\"106.5\" fill=\"#16191D\" />\n      <path d=\"M54.911 82.2622C83.1763 92.7405 91.4609 109.787 92.0701 117L114 99.3464C103.644 103.902 71.3584 73.1507 74.4043 64.0392C76.8409 56.7499 68.9218 55.6869 64.6576 56.0666C59.9874 58.5343 49.5503 65.4059 45.1644 73.1507C40.7784 80.8955 49.8346 82.4521 54.911 82.2622Z\" fill=\"#16191D\" stroke=\"#16191D\" />\n      <path d=\"M294.089 82.2622C265.824 92.7405 257.539 109.787 256.93 117L235 99.3464C245.356 103.902 277.642 73.1507 274.596 64.0392C272.159 56.7499 280.078 55.6869 284.342 56.0666C289.013 58.5343 299.45 65.4059 303.836 73.1507C308.222 80.8955 299.165 82.4521 294.089 82.2622Z\" fill=\"#16191D\" stroke=\"#16191D\" />\n      <path d=\"M187.506 26.8906C175.892 54.7087 182.709 72.3932 187.569 77.7581L159.702 81.757C170.096 77.2902 169.625 32.7055 160.884 28.719C153.891 25.5298 158.514 19.0131 161.7 16.1534C166.69 14.4208 178.834 11.4741 187.489 13.5483C196.144 15.6225 191.107 23.3074 187.506 26.8906Z\" fill=\"#16191D\" stroke=\"#16191D\" />\n      <path d=\"M309.559 246.143C285.22 228.356 266.433 230.856 260.082 234.329L262.699 206.299C264.616 217.449 308.079 227.399 313.995 219.83C318.729 213.775 323.986 219.791 326.023 223.557C326.543 228.813 326.574 241.309 322.536 249.241C318.499 257.173 312.202 250.481 309.559 246.143Z\" fill=\"#16191D\" stroke=\"#16191D\" />\n      <path d=\"M310.562 161.005C288.398 161.136 278.387 170.831 276.152 175.661L265.439 157.949C271.449 163.701 301.489 150.573 301.676 143.512C301.826 137.863 307.564 139.12 310.415 140.454C313.021 143.334 318.505 150.706 319.587 157.16C320.67 163.614 314.021 162.412 310.562 161.005Z\" fill=\"#16191D\" stroke=\"#16191D\" />\n      <path d=\"M166.242 315.869C174.381 293.702 168.442 280.095 164.455 276.063L186.127 271.981C178.145 275.832 180.037 310.707 187.014 313.528C192.595 315.785 189.2 321.043 186.804 323.39C182.959 324.916 173.556 327.637 166.711 326.31C159.867 324.982 163.547 318.796 166.242 315.869Z\" fill=\"#16191D\" stroke=\"#16191D\" />\n      <path d=\"M28.2761 180.448C54.2072 165.076 72.6682 169.365 78.6574 173.431L78.7389 145.279C75.7623 156.194 31.5458 161.932 26.3816 153.831C22.2503 147.35 16.4405 152.835 14.052 156.388C13.0307 161.571 11.8027 174.006 15.0613 182.289C18.32 190.571 25.229 184.513 28.2761 180.448Z\" fill=\"#16191D\" stroke=\"#16191D\" />\n      <path d=\"M296.686 287.016C264.787 275.85 255.437 257.686 254.749 250L230 268.811C241.687 263.957 278.124 296.725 274.687 306.434C271.937 314.201 280.874 315.334 285.686 314.929C290.957 312.3 302.736 304.977 307.686 296.725C312.636 288.472 302.415 286.813 296.686 287.016Z\" fill=\"#16191D\" stroke=\"#16191D\" />\n      <path d=\"M45.911 266.738C74.1763 256.259 82.4609 239.213 83.0701 232L105 249.654C94.6442 245.098 62.3584 275.849 65.4043 284.961C67.8409 292.25 59.9218 293.313 55.6576 292.933C50.9874 290.466 40.5503 283.594 36.1644 275.849C31.7784 268.104 40.8346 266.548 45.911 266.738Z\" fill=\"#16191D\" stroke=\"#16191D\" />\n    </svg>\n  );\n}","import React from 'react';\nimport ButtonLoader from './icons/ButtonLoader';\n\nexport default function PaintLoader() {\n  return(\n    <div className=\"PaintLoader\">\n      <ButtonLoader />\n    </div>\n  );\n}","import React, { useState, Suspense } from 'react';\n\nimport PaintLoader from './components/PaintLoader';\nimport './App.css';\n\nconst Form = React.lazy(() => import('./components/Form'));\nconst Results = React.lazy(() => import('./components/Results'));\n\nfunction App() {\n  const [data, setData] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Suspense fallback={<PaintLoader />}>\n          <Form onData={setData} />\n          <Results {...data} />\n          <code>\n            <span>\n              The following is assumed and extended to the data user provides.\n          </span>\n            <pre>\n{`region: {\n  name: \"Africa\",\n  avgAge: 19.7,\n  avgDailyIncomeInUSD: 5,\n  avgDailyIncomePopulation: 0.71\n}`}\n            </pre>\n          </code>\n        </Suspense>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}